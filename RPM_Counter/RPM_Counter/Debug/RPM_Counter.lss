
RPM_Counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00000440  000004d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000440  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800134  00800134  00000508  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000538  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000107e  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f6  00000000  00000000  000016a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006d6  00000000  00000000  0000209c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  00002774  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055f  00000000  00000000  00002904  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000068a  00000000  00000000  00002e63  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000034ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 33 01 	jmp	0x266	; 0x266 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 4a 01 	jmp	0x294	; 0x294 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e4       	ldi	r30, 0x40	; 64
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 33       	cpi	r26, 0x34	; 52
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e3       	ldi	r26, 0x34	; 52
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 33       	cpi	r26, 0x3F	; 63
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a9 01 	call	0x352	; 0x352 <main>
  9e:	0c 94 1e 02 	jmp	0x43c	; 0x43c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <enable_LCD>:
}


//Returns the cursor to home position
void return_Home_LCD (void){
	write_LCD(1, 0x02);
  a6:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <PORT>
  aa:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <PORT+0x1>
  ae:	80 81       	ld	r24, Z
  b0:	8f 7e       	andi	r24, 0xEF	; 239
  b2:	80 83       	st	Z, r24
  b4:	8f e9       	ldi	r24, 0x9F	; 159
  b6:	9f e0       	ldi	r25, 0x0F	; 15
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <enable_LCD+0x12>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <enable_LCD+0x18>
  be:	00 00       	nop
  c0:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <PORT>
  c4:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <PORT+0x1>
  c8:	80 81       	ld	r24, Z
  ca:	80 61       	ori	r24, 0x10	; 16
  cc:	80 83       	st	Z, r24
  ce:	8f e9       	ldi	r24, 0x9F	; 159
  d0:	9f e0       	ldi	r25, 0x0F	; 15
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <enable_LCD+0x2c>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <enable_LCD+0x32>
  d8:	00 00       	nop
  da:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <PORT>
  de:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <PORT+0x1>
  e2:	80 81       	ld	r24, Z
  e4:	8f 7e       	andi	r24, 0xEF	; 239
  e6:	80 83       	st	Z, r24
  e8:	8f e3       	ldi	r24, 0x3F	; 63
  ea:	9c e9       	ldi	r25, 0x9C	; 156
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <enable_LCD+0x46>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <enable_LCD+0x4c>
  f2:	00 00       	nop
  f4:	08 95       	ret

000000f6 <write_LCD>:
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	c6 2f       	mov	r28, r22
  fc:	82 30       	cpi	r24, 0x02	; 2
  fe:	11 f4       	brne	.+4      	; 0x104 <write_LCD+0xe>
 100:	d0 e2       	ldi	r29, 0x20	; 32
 102:	01 c0       	rjmp	.+2      	; 0x106 <write_LCD+0x10>
 104:	d0 e0       	ldi	r29, 0x00	; 0
 106:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <PORT>
 10a:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <PORT+0x1>
 10e:	8c 2f       	mov	r24, r28
 110:	82 95       	swap	r24
 112:	8f 70       	andi	r24, 0x0F	; 15
 114:	8d 0f       	add	r24, r29
 116:	80 83       	st	Z, r24
 118:	0e 94 53 00 	call	0xa6	; 0xa6 <enable_LCD>
 11c:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <PORT>
 120:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <PORT+0x1>
 124:	cf 70       	andi	r28, 0x0F	; 15
 126:	cd 0f       	add	r28, r29
 128:	c0 83       	st	Z, r28
 12a:	0e 94 53 00 	call	0xa6	; 0xa6 <enable_LCD>
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <clear_LCD>:
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	0e 94 7b 00 	call	0xf6	; 0xf6 <write_LCD>
 13c:	08 95       	ret

0000013e <init_LCD>:
	The parameter must be the DDR direction from one port
	0x24 set the PORTB
	0x27 set the PORTC
	0x2A set the PORTD		
*/
void init_LCD(uint8_t *dir_DDRX){			
 13e:	cf 93       	push	r28
	
	DDR = dir_DDRX;
 140:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <DDR+0x1>
 144:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <DDR>
	
	switch ((uint8_t)dir_DDRX){
 148:	99 27       	eor	r25, r25
 14a:	87 32       	cpi	r24, 0x27	; 39
 14c:	91 05       	cpc	r25, r1
 14e:	91 f0       	breq	.+36     	; 0x174 <init_LCD+0x36>
 150:	8a 32       	cpi	r24, 0x2A	; 42
 152:	91 05       	cpc	r25, r1
 154:	e1 f0       	breq	.+56     	; 0x18e <init_LCD+0x50>
 156:	84 97       	sbiw	r24, 0x24	; 36
 158:	39 f5       	brne	.+78     	; 0x1a8 <init_LCD+0x6a>
											//Set the PORTB to be used
		case 0x24:						
			PIN = (uint8_t*) 0x23;
 15a:	83 e2       	ldi	r24, 0x23	; 35
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <PIN+0x1>
 162:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <PIN>
			PORT = (uint8_t*) 0x25;
 166:	85 e2       	ldi	r24, 0x25	; 37
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <PORT+0x1>
 16e:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <PORT>
			break;
 172:	1e c0       	rjmp	.+60     	; 0x1b0 <init_LCD+0x72>
											//Set the PORTC to be used
		case 0x27:
			PIN = (uint8_t*) 0x26;
 174:	86 e2       	ldi	r24, 0x26	; 38
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <PIN+0x1>
 17c:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <PIN>
			PORT = (uint8_t*) 0x28;
 180:	88 e2       	ldi	r24, 0x28	; 40
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <PORT+0x1>
 188:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <PORT>
			break;
 18c:	11 c0       	rjmp	.+34     	; 0x1b0 <init_LCD+0x72>
											//Set the PORTD to be used
		case 0x2A:
			PIN = (uint8_t*) 0x29;
 18e:	89 e2       	ldi	r24, 0x29	; 41
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <PIN+0x1>
 196:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <PIN>
			PORT = (uint8_t*) 0x2B;
 19a:	8b e2       	ldi	r24, 0x2B	; 43
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <PORT+0x1>
 1a2:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <PORT>
			break;
 1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <init_LCD+0x72>
		
		default:
			exit(EXIT_FAILURE);
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 1e 02 	call	0x43c	; 0x43c <_exit>
			break;
	}

											//Initializes the LCD
	*DDR = 0x3F;
 1b0:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <DDR>
 1b4:	f0 91 3a 01 	lds	r31, 0x013A	; 0x80013a <DDR+0x1>
 1b8:	8f e3       	ldi	r24, 0x3F	; 63
 1ba:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1bc:	2f ef       	ldi	r18, 0xFF	; 255
 1be:	80 e7       	ldi	r24, 0x70	; 112
 1c0:	92 e0       	ldi	r25, 0x02	; 2
 1c2:	21 50       	subi	r18, 0x01	; 1
 1c4:	80 40       	sbci	r24, 0x00	; 0
 1c6:	90 40       	sbci	r25, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <init_LCD+0x84>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <init_LCD+0x8e>
 1cc:	00 00       	nop

	if (action == 2){
		register_Select |= (1<<5);
	}
	
	*PORT = bitmask_Most4_Significant_Shifted(data) + register_Select;
 1ce:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <PORT>
 1d2:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <PORT+0x1>
 1d6:	c3 e0       	ldi	r28, 0x03	; 3
 1d8:	c0 83       	st	Z, r28
	enable_LCD();
 1da:	0e 94 53 00 	call	0xa6	; 0xa6 <enable_LCD>

	if (action == 2){
		register_Select |= (1<<5);
	}
	
	*PORT = bitmask_Most4_Significant_Shifted(data) + register_Select;
 1de:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <PORT>
 1e2:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <PORT+0x1>
 1e6:	c0 83       	st	Z, r28
	enable_LCD();
 1e8:	0e 94 53 00 	call	0xa6	; 0xa6 <enable_LCD>

	if (action == 2){
		register_Select |= (1<<5);
	}
	
	*PORT = bitmask_Most4_Significant_Shifted(data) + register_Select;
 1ec:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <PORT>
 1f0:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <PORT+0x1>
 1f4:	c0 83       	st	Z, r28
	enable_LCD();
 1f6:	0e 94 53 00 	call	0xa6	; 0xa6 <enable_LCD>

	if (action == 2){
		register_Select |= (1<<5);
	}
	
	*PORT = bitmask_Most4_Significant_Shifted(data) + register_Select;
 1fa:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <PORT>
 1fe:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <PORT+0x1>
 202:	82 e0       	ldi	r24, 0x02	; 2
 204:	80 83       	st	Z, r24
	enable_LCD();
 206:	0e 94 53 00 	call	0xa6	; 0xa6 <enable_LCD>
	_delay_ms(50);
	write_LCD_8bits(1, 0x30);
	write_LCD_8bits(1, 0x30);
	write_LCD_8bits(1, 0x30);
	write_LCD_8bits(1, 0x20);
	write_LCD(1, 0x28);
 20a:	68 e2       	ldi	r22, 0x28	; 40
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	0e 94 7b 00 	call	0xf6	; 0xf6 <write_LCD>
	write_LCD(1, 0x0F);
 212:	6f e0       	ldi	r22, 0x0F	; 15
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	0e 94 7b 00 	call	0xf6	; 0xf6 <write_LCD>
	clear_LCD();
 21a:	0e 94 9a 00 	call	0x134	; 0x134 <clear_LCD>
	write_LCD(1, 0x06);
 21e:	66 e0       	ldi	r22, 0x06	; 6
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	0e 94 7b 00 	call	0xf6	; 0xf6 <write_LCD>
	
}
 226:	cf 91       	pop	r28
 228:	08 95       	ret

0000022a <gotoXY_LCD>:
								  2 to write in the second row
							 col: 1-16 to write in the selected column 
*/
void gotoXY_LCD (uint8_t row, uint8_t col){
	uint16_t coordinate;
	if (row == 1){
 22a:	81 30       	cpi	r24, 0x01	; 1
 22c:	21 f4       	brne	.+8      	; 0x236 <gotoXY_LCD+0xc>
		coordinate = 0x7F + col;
 22e:	70 e0       	ldi	r23, 0x00	; 0
 230:	61 58       	subi	r22, 0x81	; 129
 232:	7f 4f       	sbci	r23, 0xFF	; 255
 234:	03 c0       	rjmp	.+6      	; 0x23c <gotoXY_LCD+0x12>
	}
	else{
		coordinate = 0xBF + col;
 236:	70 e0       	ldi	r23, 0x00	; 0
 238:	61 54       	subi	r22, 0x41	; 65
 23a:	7f 4f       	sbci	r23, 0xFF	; 255
	}
	write_LCD(1, coordinate);
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	0e 94 7b 00 	call	0xf6	; 0xf6 <write_LCD>
 242:	08 95       	ret

00000244 <print_LCD>:


/*Writes a whole phrase on the LCD until gets a NULL
  The parameter must be a string
*/
void print_LCD(uint8_t *string){
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
	while (*string != NULL){
 248:	fc 01       	movw	r30, r24
 24a:	60 81       	ld	r22, Z
 24c:	66 23       	and	r22, r22
 24e:	41 f0       	breq	.+16     	; 0x260 <print_LCD+0x1c>
 250:	ec 01       	movw	r28, r24
 252:	21 96       	adiw	r28, 0x01	; 1
		write_LCD(2, *string);
 254:	82 e0       	ldi	r24, 0x02	; 2
 256:	0e 94 7b 00 	call	0xf6	; 0xf6 <write_LCD>

/*Writes a whole phrase on the LCD until gets a NULL
  The parameter must be a string
*/
void print_LCD(uint8_t *string){
	while (*string != NULL){
 25a:	69 91       	ld	r22, Y+
 25c:	61 11       	cpse	r22, r1
 25e:	fa cf       	rjmp	.-12     	; 0x254 <print_LCD+0x10>
		write_LCD(2, *string);
		string ++;
	}
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	08 95       	ret

00000266 <__vector_1>:
volatile uint8_t value_ready_flag = 0;									


/*//////////////////////////ISRs////////////////////////////////////*/
///External Interrupts 0
ISR(INT0_vect){
 266:	1f 92       	push	r1
 268:	0f 92       	push	r0
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	0f 92       	push	r0
 26e:	11 24       	eor	r1, r1
 270:	8f 93       	push	r24
 272:	9f 93       	push	r25
	rev_cnt ++;					//Every time that the INT0 executes add 1
 274:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <rev_cnt>
 278:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <rev_cnt+0x1>
 27c:	01 96       	adiw	r24, 0x01	; 1
 27e:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <rev_cnt+0x1>
 282:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <rev_cnt>
}
 286:	9f 91       	pop	r25
 288:	8f 91       	pop	r24
 28a:	0f 90       	pop	r0
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	0f 90       	pop	r0
 290:	1f 90       	pop	r1
 292:	18 95       	reti

00000294 <__vector_11>:

//Comp A Timer Interrupt 
ISR(TIMER1_COMPA_vect){
 294:	1f 92       	push	r1
 296:	0f 92       	push	r0
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	0f 92       	push	r0
 29c:	11 24       	eor	r1, r1
 29e:	2f 93       	push	r18
 2a0:	3f 93       	push	r19
 2a2:	4f 93       	push	r20
 2a4:	8f 93       	push	r24
 2a6:	9f 93       	push	r25
	rpm = rev_cnt * 15;			//The time interrupt every 4 sec, so multiply by 15 to have the rpm
 2a8:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <rev_cnt>
 2ac:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <rev_cnt+0x1>
 2b0:	4f e0       	ldi	r20, 0x0F	; 15
 2b2:	42 9f       	mul	r20, r18
 2b4:	c0 01       	movw	r24, r0
 2b6:	43 9f       	mul	r20, r19
 2b8:	90 0d       	add	r25, r0
 2ba:	11 24       	eor	r1, r1
 2bc:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <rpm+0x1>
 2c0:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <rpm>
	value_ready_flag = 1;		//The value is ready to update
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__data_end>
	rev_cnt = 0;				//Clear the cnt
 2ca:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <rev_cnt+0x1>
 2ce:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <rev_cnt>
	TCNT1 =  0;					//Re-start the TIMER1
 2d2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 2d6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
}
 2da:	9f 91       	pop	r25
 2dc:	8f 91       	pop	r24
 2de:	4f 91       	pop	r20
 2e0:	3f 91       	pop	r19
 2e2:	2f 91       	pop	r18
 2e4:	0f 90       	pop	r0
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	0f 90       	pop	r0
 2ea:	1f 90       	pop	r1
 2ec:	18 95       	reti

000002ee <welcome_LCD>:


/*//////////////////////////FUNCTIONS////////////////////////////////////*/

void welcome_LCD(void){
	print_LCD((uint8_t *)"   Bienvenido");
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	0e 94 22 01 	call	0x244	; 0x244 <print_LCD>
 2f6:	2f ef       	ldi	r18, 0xFF	; 255
 2f8:	8d e3       	ldi	r24, 0x3D	; 61
 2fa:	99 e4       	ldi	r25, 0x49	; 73
 2fc:	21 50       	subi	r18, 0x01	; 1
 2fe:	80 40       	sbci	r24, 0x00	; 0
 300:	90 40       	sbci	r25, 0x00	; 0
 302:	e1 f7       	brne	.-8      	; 0x2fc <welcome_LCD+0xe>
 304:	00 c0       	rjmp	.+0      	; 0x306 <welcome_LCD+0x18>
 306:	00 00       	nop
	_delay_ms(1500);
	clear_LCD();
 308:	0e 94 9a 00 	call	0x134	; 0x134 <clear_LCD>
	print_LCD((uint8_t *)"Motor girando a");
 30c:	8e e0       	ldi	r24, 0x0E	; 14
 30e:	91 e0       	ldi	r25, 0x01	; 1
 310:	0e 94 22 01 	call	0x244	; 0x244 <print_LCD>
 314:	08 95       	ret

00000316 <init_External_Interrupt0>:
}


void init_External_Interrupt0(void){
	DDRB &=		~(1<<INTERRUPT_PIN);		//Set the PORTD2 as Input
 316:	22 98       	cbi	0x04, 2	; 4
	EICRA |=	(1<<ISC01);					//Interrupt works at the falling edge
 318:	e9 e6       	ldi	r30, 0x69	; 105
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	82 60       	ori	r24, 0x02	; 2
 320:	80 83       	st	Z, r24
	EICRA &=	~(1<<ISC00);				
 322:	80 81       	ld	r24, Z
 324:	8e 7f       	andi	r24, 0xFE	; 254
 326:	80 83       	st	Z, r24
	EIMSK |=	(1<<INT0);					//External Interrupt Request 0 Enable
 328:	e8 9a       	sbi	0x1d, 0	; 29
 32a:	08 95       	ret

0000032c <init_Timer0>:
}


void init_Timer0(void){
	TCCR1A =	0X00;
 32c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B |=	(1<<CS02) | (1<<CS00);		//Set pre-scaler to 1024
 330:	e1 e8       	ldi	r30, 0x81	; 129
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 81       	ld	r24, Z
 336:	85 60       	ori	r24, 0x05	; 5
 338:	80 83       	st	Z, r24
	TIMSK1 |=	(1<<OCIE1A);				//Compare Match A Interrupt Enable
 33a:	ef e6       	ldi	r30, 0x6F	; 111
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	82 60       	ori	r24, 0x02	; 2
 342:	80 83       	st	Z, r24
	OCR1A =		62500;						//Output Compare Register A set to 62500 to make an approximation every 4 sec
 344:	84 e2       	ldi	r24, 0x24	; 36
 346:	94 ef       	ldi	r25, 0xF4	; 244
 348:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 34c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 350:	08 95       	ret

00000352 <main>:
}


/*//////////////////////////MAIN/////////////////////////////////////*/
int main(void)
{
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	cd b7       	in	r28, 0x3d	; 61
 358:	de b7       	in	r29, 0x3e	; 62
 35a:	2a 97       	sbiw	r28, 0x0a	; 10
 35c:	0f b6       	in	r0, 0x3f	; 63
 35e:	f8 94       	cli
 360:	de bf       	out	0x3e, r29	; 62
 362:	0f be       	out	0x3f, r0	; 63
 364:	cd bf       	out	0x3d, r28	; 61
	char rpm_lcd [10];						//rpm will be converted to an array in this var
	init_LCD((uint8_t *)0x27);				//Initialize the LCD in PORTC
 366:	87 e2       	ldi	r24, 0x27	; 39
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 9f 00 	call	0x13e	; 0x13e <init_LCD>
	welcome_LCD();
 36e:	0e 94 77 01 	call	0x2ee	; 0x2ee <welcome_LCD>
	init_External_Interrupt0();
 372:	0e 94 8b 01 	call	0x316	; 0x316 <init_External_Interrupt0>
	init_Timer0();
 376:	0e 94 96 01 	call	0x32c	; 0x32c <init_Timer0>
	sei();									//Set bit I from SREG (Enables global interrupts)
 37a:	78 94       	sei
	
    while (1) 
    {
		if (value_ready_flag == 1){
 37c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
 380:	81 30       	cpi	r24, 0x01	; 1
 382:	e1 f7       	brne	.-8      	; 0x37c <main+0x2a>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 384:	f8 94       	cli
			ATOMIC_BLOCK(ATOMIC_FORCEON){	//Enter in an Atomic Block, in order to disable the ISR
				itoa(rpm, rpm_lcd, 10);		//Store the rpm value as an array in rpm_lcd, so it can be displayed 
 386:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <rpm>
 38a:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <rpm+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 38e:	4a e0       	ldi	r20, 0x0A	; 10
 390:	be 01       	movw	r22, r28
 392:	6f 5f       	subi	r22, 0xFF	; 255
 394:	7f 4f       	sbci	r23, 0xFF	; 255
 396:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__itoa_ncheck>
				value_ready_flag = 0;		//Rpm Value has been update so set to 0 the flag 
 39a:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <__data_end>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 39e:	78 94       	sei
			}								
			gotoXY_LCD(2,0);
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	82 e0       	ldi	r24, 0x02	; 2
 3a4:	0e 94 15 01 	call	0x22a	; 0x22a <gotoXY_LCD>
			print_LCD((uint8_t *)"                ");
 3a8:	8e e1       	ldi	r24, 0x1E	; 30
 3aa:	91 e0       	ldi	r25, 0x01	; 1
 3ac:	0e 94 22 01 	call	0x244	; 0x244 <print_LCD>
			gotoXY_LCD(2, 0);
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	82 e0       	ldi	r24, 0x02	; 2
 3b4:	0e 94 15 01 	call	0x22a	; 0x22a <gotoXY_LCD>
			print_LCD((uint8_t *)"     ");
 3b8:	89 e2       	ldi	r24, 0x29	; 41
 3ba:	91 e0       	ldi	r25, 0x01	; 1
 3bc:	0e 94 22 01 	call	0x244	; 0x244 <print_LCD>
			print_LCD((uint8_t *)rpm_lcd);
 3c0:	ce 01       	movw	r24, r28
 3c2:	01 96       	adiw	r24, 0x01	; 1
 3c4:	0e 94 22 01 	call	0x244	; 0x244 <print_LCD>
			print_LCD((uint8_t *)" rpm");
 3c8:	8f e2       	ldi	r24, 0x2F	; 47
 3ca:	91 e0       	ldi	r25, 0x01	; 1
 3cc:	0e 94 22 01 	call	0x244	; 0x244 <print_LCD>
 3d0:	d5 cf       	rjmp	.-86     	; 0x37c <main+0x2a>

000003d2 <__itoa_ncheck>:
 3d2:	bb 27       	eor	r27, r27
 3d4:	4a 30       	cpi	r20, 0x0A	; 10
 3d6:	31 f4       	brne	.+12     	; 0x3e4 <__itoa_ncheck+0x12>
 3d8:	99 23       	and	r25, r25
 3da:	22 f4       	brpl	.+8      	; 0x3e4 <__itoa_ncheck+0x12>
 3dc:	bd e2       	ldi	r27, 0x2D	; 45
 3de:	90 95       	com	r25
 3e0:	81 95       	neg	r24
 3e2:	9f 4f       	sbci	r25, 0xFF	; 255
 3e4:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__utoa_common>

000003e8 <__utoa_ncheck>:
 3e8:	bb 27       	eor	r27, r27

000003ea <__utoa_common>:
 3ea:	fb 01       	movw	r30, r22
 3ec:	55 27       	eor	r21, r21
 3ee:	aa 27       	eor	r26, r26
 3f0:	88 0f       	add	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	aa 1f       	adc	r26, r26
 3f6:	a4 17       	cp	r26, r20
 3f8:	10 f0       	brcs	.+4      	; 0x3fe <__utoa_common+0x14>
 3fa:	a4 1b       	sub	r26, r20
 3fc:	83 95       	inc	r24
 3fe:	50 51       	subi	r21, 0x10	; 16
 400:	b9 f7       	brne	.-18     	; 0x3f0 <__utoa_common+0x6>
 402:	a0 5d       	subi	r26, 0xD0	; 208
 404:	aa 33       	cpi	r26, 0x3A	; 58
 406:	08 f0       	brcs	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 408:	a9 5d       	subi	r26, 0xD9	; 217
 40a:	a1 93       	st	Z+, r26
 40c:	00 97       	sbiw	r24, 0x00	; 0
 40e:	79 f7       	brne	.-34     	; 0x3ee <__utoa_common+0x4>
 410:	b1 11       	cpse	r27, r1
 412:	b1 93       	st	Z+, r27
 414:	11 92       	st	Z+, r1
 416:	cb 01       	movw	r24, r22
 418:	0c 94 0e 02 	jmp	0x41c	; 0x41c <strrev>

0000041c <strrev>:
 41c:	dc 01       	movw	r26, r24
 41e:	fc 01       	movw	r30, r24
 420:	67 2f       	mov	r22, r23
 422:	71 91       	ld	r23, Z+
 424:	77 23       	and	r23, r23
 426:	e1 f7       	brne	.-8      	; 0x420 <strrev+0x4>
 428:	32 97       	sbiw	r30, 0x02	; 2
 42a:	04 c0       	rjmp	.+8      	; 0x434 <strrev+0x18>
 42c:	7c 91       	ld	r23, X
 42e:	6d 93       	st	X+, r22
 430:	70 83       	st	Z, r23
 432:	62 91       	ld	r22, -Z
 434:	ae 17       	cp	r26, r30
 436:	bf 07       	cpc	r27, r31
 438:	c8 f3       	brcs	.-14     	; 0x42c <strrev+0x10>
 43a:	08 95       	ret

0000043c <_exit>:
 43c:	f8 94       	cli

0000043e <__stop_program>:
 43e:	ff cf       	rjmp	.-2      	; 0x43e <__stop_program>
